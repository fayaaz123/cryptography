import string

# Function to count the frequency of each letter in a string
def count_letters(s):
    freq = {}
    for c in s:
        if c in string.ascii_letters:
            freq[c] = freq.get(c, 0) + 1
    return freq

# Function to calculate the correlation between two frequency distributions
def correlation(freq1, freq2):
    sum_xx, sum_xy, sum_yy = 0, 0, 0
    for c in string.ascii_lowercase:
        x = freq1.get(c, 0)
        y = freq2.get(c, 0)
        sum_xx += x * x
        sum_yy += y * y
        sum_xy += x * y
    return sum_xy / ((sum_xx * sum_yy) ** 0.5)

# Function to perform a letter frequency attack on a monoalphabetic substitution cipher
def frequency_attack(ciphertext, top_n=10):
    freqs = count_letters(ciphertext.lower())
    # English letter frequencies (source: https://en.wikipedia.org/wiki/Letter_frequency)
    english_freqs = {'a': 8.167, 'b': 1.492, 'c': 2.782, 'd': 4.253, 'e': 12.702, 'f': 2.228, 'g': 2.015,
                     'h': 6.094, 'i': 6.966, 'j': 0.153, 'k': 0.772, 'l': 4.025, 'm': 2.406, 'n': 6.749,
                     'o': 7.507, 'p': 1.929, 'q': 0.095, 'r': 5.987, 's': 6.327, 't': 9.056, 'u': 2.758,
                     'v': 0.978, 'w': 2.360, 'x': 0.150, 'y': 1.974, 'z': 0.074}
    # Calculate the correlation between the ciphertext frequencies and the English letter frequencies
    correlations = {}
    for shift in range(26):
        shifted_freqs = {chr((ord(c) - 97 + shift) % 26 + 97): freqs[c] for c in freqs}
        correlations[shift] = correlation(shifted_freqs, english_freqs)
    # Sort the correlations in descending order
    sorted_correlations = sorted(correlations.items(), key=lambda x: x[1], reverse=True)
    # Print the top n possible plaintexts
    for i in range(min(top_n, 26)):
        shift, corr = sorted_correlations[i]
        plaintext = ""
        for c in ciphertext:
            if c in string.ascii_letters:
                if c.islower():
                    plaintext += chr((ord(c) - 97 - shift) % 26 + 97)
                else:
                    plaintext += chr((ord(c) - 65 - shift) % 26 + 65)
            else:
                plaintext += c
        print(f"Possible plaintext {i+1} (shift={shift}, correlation={corr:.3f}):\n{plaintext}\n")

# Example usage
ciphertext = "Vg vf n onol naq fgvyy arkg gb gur ebpxf"
frequency_attack(ciphertext, top_n=5)
