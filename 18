from Crypto.Cipher import DES

# Set the initial key
key = b'0123456789ABCDEF'

# Set the parity bits
parity_bits = [
    57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18,
    10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36,
    63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22,
    14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4
]

# Set the initial key permutation
key = bytes([key[bit - 1] for bit in parity_bits])

# Split the key into two halves
left_half = key[:28]
right_half = key[28:]

# Set the subsets for the first 24 and second 24 bits of each subkey
subset_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
subset_2 = [27, 28, 29, 30, 31, 32, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]

# Generate the 16 subkeys
subkeys = []
for i in range(16):
    # Shift the two halves based on the shift schedule
    left_half = left_half[1:] + left_half[:1]
    right_half = right_half[1:] + right_half[:1]
    
    # Get the first 24 bits of the subkey from subset 1
    subkey_1 = bytes([left_half[bit - 1] for bit in subset_1]) + \
               bytes([right_half[bit - 1] for bit in subset_1])
    
    # Get the second 24 bits of the subkey from subset 2
    subkey_2 = bytes([left_half[bit - 1] for bit in subset_2]) + \
               bytes([right_half[bit - 1] for bit in subset_2])
    
    # Combine the two halves of the subkey
    subkey = subkey_1 + subkey_2
    
    # Perform the subkey permutation
    subkey = bytes([subkey[bit - 1] for bit in parity_bits])
    
    # Add the subkey to the list of subkeys
    subkeys.append(subkey)

# Create the DES cipher object
cipher = DES.new(key, DES.MODE_ECB)

# Set the plaintext
plaintext = b
